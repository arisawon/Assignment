USE [db_aa587c_assesment]
GO

/****** Object:  Table [dbo].[Accounts]    Script Date: 11-11-2024 14:32:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Accounts](
	[AccountId] [int] IDENTITY(1,1) NOT NULL,
	[AccountNumber] [varchar](200) NOT NULL,
	[AccountHolderName] [varchar](250) NOT NULL,
	[Balance] [decimal](18, 2) NOT NULL,
 CONSTRAINT [PK_Accounts] PRIMARY KEY CLUSTERED 
(
	[AccountId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Accounts_1] UNIQUE NONCLUSTERED 
(
	[AccountNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[Accounts] ADD  CONSTRAINT [DF_Accounts_Balance]  DEFAULT ((0)) FOR [Balance]
GO


/****** ******************************************************************************************************* ******/

USE [db_aa587c_assesment]
GO

/****** Object:  Table [dbo].[Transactions]    Script Date: 11-11-2024 14:33:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Transactions](
	[TransactionId] [bigint] IDENTITY(1,1) NOT NULL,
	[TransactionDate] [datetime] NOT NULL,
	[FromAccount] [varchar](200) NOT NULL,
	[ToAccount] [varchar](200) NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[TransactionDescription] [varchar](150) NULL,
 CONSTRAINT [PK_Transactions] PRIMARY KEY CLUSTERED 
(
	[TransactionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO


/****** ******************************************************************************************************* ******/


USE [db_aa587c_assesment]
GO

/****** Object:  StoredProcedure [dbo].[AccountsInsert]    Script Date: 11-11-2024 14:34:18 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[AccountsInsert] 
	-- Add the parameters for the stored procedure here
	 @AccountNumber AS varchar(200) = null
	,@NewId BIGINT OUTPUT
    ,@AccountHolderName AS varchar(250) = null
    ,@Balance AS Decimal(18,2) = 0.00
    
AS
--start
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION;
        
		--insert
		BEGIN
			INSERT INTO [dbo].Accounts
					(AccountNumber
					,AccountHolderName
					,Balance
					)
				VALUES
					(@AccountNumber
					,@AccountHolderName
					,@Balance)
		END
		--insert

        COMMIT TRANSACTION; 
		SET @NewId = SCOPE_IDENTITY();
	END TRY 
	BEGIN CATCH

	--	--transaction is uncommittable.  
        IF (XACT_STATE()) = -1  
        BEGIN  
            ROLLBACK TRANSACTION;  
			SET @NewId = -1;
        END;  
        
 --       --transaction is committable.  
        IF (XACT_STATE()) = 1  
        BEGIN  
            COMMIT TRANSACTION; 
			 SET @NewId = SCOPE_IDENTITY();
        END; 

	END CATCH
	--end catch
	
END
--end
GO


/***************************************************************************************************************************/

USE [db_aa587c_assesment]
GO

/****** Object:  StoredProcedure [dbo].[TransactionInsert]    Script Date: 11-11-2024 14:35:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[TransactionInsert] 
	-- Add the parameters for the stored procedure here
	 @FromAccount AS varchar(200) = null
    ,@ToAccount AS varchar(200) = null
	,@TransactionDate AS DateTime = null
    ,@Amount AS decimal(18,2) = 0
    ,@TransactionDescription AS Varchar(150) = null
	,@NewId BIGINT OUTPUT
    
AS
--start
BEGIN
	DECLARE @BalanceToAccount DECIMAL(18,2);
	DECLARE @NewBalanceToAccount DECIMAL(18,2);
	DECLARE @BalanceFromAccount DECIMAL(18,2);
	DECLARE @NewBalanceFromAccount DECIMAL(18,2);

	IF @TransactionDate is NULL
		SET @TransactionDate = GETDATE();

	BEGIN TRY
		BEGIN TRANSACTION;
        
		--insert
		BEGIN
			INSERT INTO [Transactions]
					([FromAccount]
					,[ToAccount]
					,[TransactionDate]
					,[Amount]
					,[TransactionDescription])
				VALUES
					(@FromAccount
					,@ToAccount
					,@TransactionDate
					,@Amount
					,@TransactionDescription
					)

			
			SELECT @BalanceFromAccount = Balance FROM Accounts WHERE AccountNumber = @FromAccount;
			--Print '@BalanceFromAccount : ' + CAST(@BalanceFromAccount AS Varchar(100));
			
			SET @NewBalanceFromAccount = @BalanceFromAccount - @Amount;
			--Print '@NewBalanceFromAccount : ' + CAST(@NewBalanceFromAccount AS Varchar(100));
			SELECT @BalanceToAccount = Balance FROM Accounts WHERE AccountNumber = @ToAccount;
			--Print @BalanceToAccount;
			SET @NewBalanceToAccount = @BalanceToAccount + @Amount;

			UPDATE Accounts 
			SET Balance = @NewBalanceFromAccount
			WHERE AccountNumber like @FromAccount;

			UPDATE Accounts
			SET Balance = @NewBalanceToAccount
			WHERE AccountNumber like @ToAccount;

		END
		--insert
		
        COMMIT TRANSACTION; 
		SET @NewId = SCOPE_IDENTITY();
		
	END TRY 
	BEGIN CATCH

	--	--transaction is uncommittable.  
        IF (XACT_STATE()) = -1  
        BEGIN  
            ROLLBACK TRANSACTION; 
			SET @NewId = -1;
        END;  
        
 --       --transaction is committable.  
        IF (XACT_STATE()) = 1  
        BEGIN  
            COMMIT TRANSACTION; 
			SET @NewId = SCOPE_IDENTITY();
        END; 

	END CATCH
	----end catch
	
END
--end

/****** ******************************************************************************************************************** ******/
GO


/*************************************************************************************************************************/

